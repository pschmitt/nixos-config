name: Nix RPi Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  nix-conf: |-
    fallback = true # build from source if a binary substitute fails
    # substituters = https://cache.garnix.io https://cache.nixos.org/ https://hyprland.cachix.org https://hyprland.cachix.org ssh://${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} https://nix-cache.brkn.lol https://nix-community.cachix.org
    substituters = https://cache.garnix.io https://cache.nixos.org/ https://hyprland.cachix.org https://hyprland.cachix.org https://nix-community.cachix.org ssh-ng://${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}?ssh-key=/home/runner/.ssh/id_ed25519&trusted=true&want-mass-query=false
    trusted-public-keys = cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc= nix-cache.brkn.lol:k/zdgSv+6lcJ/9DRILjA7H18eIlFSA0OwzyqqXEwySM= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= rofl-03:p25y1GufWGd6aWpimb8j6F0obxn3jwYCj7sCCXgp7A0= rofl-09:aWhkLUlpkPYsTs32uCL5+lLTthnJQm+hlgJ1IUNwtIs= rofl-10:vYRBSypcO/0NnPsDxgSELIcJotU/LmZ1f6vZUKUmty0= rofl-13:ESRCqy2jcftg690k98KSNqF6LgOqz1X7ZnXXE//WWD0=
    extra-platforms = aarch64-linux i686-linux
    builders-use-substitutes = true
    access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

jobs:
  build-rpi-img-artifacts:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["pica4"] # add more hosts if needed
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: wimpysworld/nothing-but-nix@main
        # with:
        #   hatchet-protocol: 'rampage'
        #   witness-carnage: true

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: ${{ env.nix-conf }}

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build SD image for ${{ matrix.target }}
        run: |
          nix build --print-build-logs '.#nixosConfigurations.${{ matrix.target }}.config.system.build.sdImage'

      - name: Prepare asset upload
        id: prepare_asset_upload
        run: |
          set -x
          # Resolve the nix result symlink to avoid copying large files
          RESULT_DIR=$(readlink -f result) || {
            echo "Could not resolve 'result' symlink" >&2
            ls -la . >&2
            exit 1
          }

          SD_DIR=$(readlink -f "${RESULT_DIR}/sd-image") || {
            echo "Could not resolve sd-image directory under result" >&2
            ls -la "${RESULT_DIR}" >&2
            exit 1
          }

          IMG_ZST=$(find "${SD_DIR}" -maxdepth 1 -type f -name "*.img.zst" | head -n 1)
          if [[ -z "$IMG_ZST" ]]; then
            echo "No .img.zst file found in ${SD_DIR}" >&2
            ls -la "${SD_DIR}" >&2 || true
            exit 1
          fi

          echo "ðŸ“¦ Found image: $IMG_ZST"

          # Use the nix store sd-image directory directly as the asset dir
          ASSET_DIR="$SD_DIR"
          ARTIFACT_NAME="$(basename "$IMG_ZST")"
          ARTIFACT_PATH="$IMG_ZST"

          echo "ASSET_DIR=${ASSET_DIR}" >> "$GITHUB_ENV"
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_ENV"
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> "$GITHUB_ENV"

      - name: Upload SD image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: rsync transfer
        uses: burnett01/rsync-deployments@7.1.0
        with:
          switches: -avzr --delete --delete-after --safe-links --mkpath
          path: ${{ env.ARTIFACT_PATH }}
          remote_path: /mnt/data/blobs/img/${{ matrix.target }}/
          remote_host: ${{ secrets.SSH_BLOBS_HOST }}
          remote_user: ${{ secrets.SSH_USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
