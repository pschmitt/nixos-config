name: Nix build

on: [push, pull_request]

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Generate package list
        id: set-matrix
        run: |
          set -x
          mapfile -t ALL_PACKAGES < <(nix flake show --json | \
            jq -er '.packages["x86_64-linux"] | keys[]')
          PACKAGES=()
          for p in "${ALL_PACKAGES[@]}"
          do
            # Skip proprietary packages
            if nix eval --impure ".#${p}.meta.license.free" | grep -q 'true'
            then
              PACKAGES+=("$p")
            fi
          done

          JSON_PACKAGES=$(printf '%s\n' "${PACKAGES[@]}" | jq -Rcn '[inputs]')
          JSON_ALL_PACKAGES=$(printf '%s\n' "${ALL_PACKAGES[@]}" | jq -Rcn '[inputs]')

          # echo "all_packages=$JSON_ALL_PACKAGES" >> $GITHUB_OUTPUT
          echo "packages=$JSON_PACKAGES" >> $GITHUB_OUTPUT
        shell: bash

  build:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: ${{ fromJson(needs.setup-matrix.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build package
        run: |-
          nix build --print-build-logs \
            '.#packages.x86_64-linux.${{ matrix.pkg }}'

