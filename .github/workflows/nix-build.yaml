name: Nix build

on: [push, pull_request]

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Generate package list
        id: set-matrix
        shell: bash
        run: |
          mapfile -t PKGS < <(nix flake show --json | \
            jq -er '.packages["x86_64-linux"] | keys[]')
          PKGS_FREE=()
          PKGS_NONFREE=()
          for p in "${PKGS[@]}"
          do
            # Skip proprietary packages
            if nix eval --impure --json ".#${p}.meta.license" | jq -er '.free'
            then
              PKGS_FREE+=("$p")
            else
              PKGS_NONFREE+=("$p")
            fi
          done

          JSON_PKGS=$(printf '%s\n' "${PKGS[@]}" | jq -Rcn '[inputs]')
          JSON_PKGS_FREE=$(printf '%s\n' "${PKGS_FREE[@]}" | jq -Rcn '[inputs]')
          JSON_PKGS_NONFREE=$(printf '%s\n' "${PKGS_NONFREE[@]}" | jq -Rcn '[inputs]')
          JSON_NIXOS_CONFIGS=$(nix flake show --json | jq -c '.nixosConfigurations | keys')

          MATRIX=$(jq -cn \
            --argjson hosts "$JSON_NIXOS_CONFIGS" \
            --argjson pkgs "$JSON_PKGS" \
            --argjson pkgs_nonfree "$JSON_PKGS_NONFREE" \
            --argjson pkgs_free "$JSON_PKGS_FREE" \
          '
            {
              pkgs: {
                free: $pkgs_free,
                nonfree: $pkgs_nonfree
                all: $pkgs
              }
              hosts: $hosts
            }
          ')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build-pkgs-free:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pkg: ${{ fromJson(needs.setup-matrix.outputs.matrix).pkgs.free }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build package
        run: |-
          nix build --print-build-logs \
            '.#packages.x86_64-linux.${{ matrix.pkg }}'

  build-hosts:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.setup-matrix.outputs.matrix).hosts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build nixosConfiguration
        run: |-
           nix build --print-build-logs \
             '.#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel'
