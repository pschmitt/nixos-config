name: Nix ISOs

on:
  push:
    branches:
      - main
  workflow_dispatch: # allows manual triggering

jobs:
  build-iso-artifacts:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ "standard", "xmr" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Build ISO for ${{ matrix.target }} target
        id: build_iso
        run: |
          ISO=iso
          ISO_FILENAME_SUFFIX=""

          if [[ "${{ matrix.target }}" == "xmr" ]]
          then
            ISO=iso-xmr
            ISO_FILENAME_SUFFIX=-xmr
          fi

          nix build --print-build-logs ".#nixosConfigurations.${ISO}.config.system.build.isoImage"

          # Locate the generated ISO file (inside result/iso)
          ISO_FILE=$(find "$PWD" result/iso -maxdepth 1 -type f -name "*.iso" | head -n 1)

          if [[ -z "$ISO_FILE" ]]
          then
            echo "No ISO file found in result/iso" >&2
            tree result >&2
            exit 1
          fi

          echo "ðŸ’¿ Found ISO file: $ISO_FILE"

          # Transfer file to writable dir (in case we need to rename it)
          ASSET_DIR=asset-dir
          mkdir -p "$ASSET_DIR"
          ISO_FILENAME="$(basename "$ISO_FILE")"

          if [[ -n "$ISO_FILENAME_SUFFIX" ]]
          then
            # Extract the base filename (e.g. "nixos-minimal-25.05.20250207.a3eaf5e-x86_64-linux.iso")
            ISO_FILENAME="${ISO_FILENAME%.iso}${ISO_FILENAME_SUFFIX}.iso"
          fi

          cp -v "$ISO_FILE" "${ASSET_DIR}/${ISO_FILENAME}"
          ARTIFACT_PATH="${ASSET_DIR}/${ISO_FILENAME}"

          echo "ARTIFACT_NAME=${ISO_FILENAME}.zip" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: rsync transfer
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avzr
          # path is set to the value of $ASSET_DIR
          path: ./asset-dir/
          remote_path: ./isos/
          remote_host: ${{ vars.SSH_HOSTNAME }}
          remote_user: ${{ vars.SSH_USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
