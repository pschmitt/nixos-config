#!/usr/bin/env bash

github_age_keys() {
  local user="$1"
  local url="https://github.com/${user:-${GITHUB_USERNAME}}.keys"

  curl -fsSL "$url" | grep ed25519 | xargs -I {} bash -c 'ssh-to-age <<< "{}"'
}

# shellcheck disable=2120
github_age_keys_yaml() {
  local gh_keys hosts
  mapfile -t gh_keys < <(github_age_keys "$@")

  local key
  for key in "${gh_keys[@]}"
  do
    echo "- ${key} # github/${GITHUB_USERNAME}"
  done
}

nix_host_configs() {
  # NOTE we could inspect the flake but there is not easy way to filter out
  # non-physical hosts such as "iso" or "pxe"
  find ./hosts -mindepth 2 -maxdepth 2 -iname "secrets.sops.yaml" \
    -exec sh -c 'i="$1"; basename "$(dirname "$i")"' shell {} \; | sort -u
}

host_pubkey() {
  local host="$1"

  # sops
  sops --decrypt --extract '["ssh"]["host_keys"]["ed25519"]["pubkey"]' \
    "./hosts/${host}/secrets.sops.yaml"
}

host_privkey() {
  local host="$1"

  # sops
  sops --decrypt --extract '["ssh"]["host_keys"]["ed25519"]["privkey"]' \
    "./hosts/${host}/secrets.sops.yaml"
}

host_age_key() {
  host_pubkey "$1" | ssh-to-age
}

sops_config_gen() {
  local gh_keys hosts
  mapfile -t hosts < <(nix_host_configs)
  gh_keys=$(github_age_keys_yaml)

  if [[ -z $gh_keys ]]
  then
    echo "No github keys found for user ${GITHUB_USERNAME}" >&2
    return 1
  fi

  local sops_config
  sops_config=$(gh_keys="$gh_keys" yq -n '
    {
      "creation_rules": [
        {
          "path_regex": "secrets/shared.*",
          "key_groups": [{"age": env(gh_keys)}]
        }
      ]
    }
  ')

  local creation_rules host host_age_key
  for host in "${hosts[@]}"
  do
    host_age_key=$(host_age_key "$host")
    creation_rules=$(host="$host" host_age_key="$host_age_key" gh_keys="$gh_keys" \
    yq -ern '{
      "path_regex": "hosts/" + strenv(host) + "/secrets.sops.yaml",
      "key_groups": [
        {
          "age": [
            strenv(host_age_key)
          ] + env(gh_keys)
        }
      ]
    } | .key_groups[0].age[0] line_comment="host key of " + strenv(host)')

    # Add host-specific creation rules and append current host age key to the
    # list of shared secret recipients
    sops_config=$(r="$creation_rules" host="$host" host_age_key="$host_age_key" \
      yq -er <<< "$sops_config" '
        .creation_rules += env(r) |
        .creation_rules[0].key_groups[0].age += [strenv(host_age_key)] |
        .creation_rules[0].key_groups[0].age[-1] line_comment="host key of " + strenv(host)
      ')
  done

  # append default config
  gh_keys="$gh_keys" yq -er <<< "$sops_config" '
    .creation_rules += [{"key_groups": [{"age": env(gh_keys)}]}] |
    .creation_rules[-1] headComment="Default rules"'
  # echo "$sops_config"
}

main() {
  set -e -o pipefail
  # go to the root of the repo
  cd "$(cd "$(dirname "$0")/.." >/dev/null 2>&1; pwd -P)" || exit 9

  GITHUB_USERNAME="${GITHUB_USERNAME:-$(whoami)}"

  while [[ -n "$*" ]]
  do
    case "$1" in
      -g|--username|--github-user*)
        GITHUB_USERNAME="$2"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done

  SOPS_CONFIG_TMPFILE="$(mktemp)"
  SOPS_CONFIG_FILE="${1:-${PWD}/.sops.yaml}"

  if ! {
    echo -e "# generated by $(basename "$0") on $(date -Iseconds)\n"
    sops_config_gen
    echo -e "\n# vim: set ft=yaml :"
  } > "$SOPS_CONFIG_TMPFILE"
  then
    echo "Something went wrong" >&2
    return 1
  fi

  if mv "$SOPS_CONFIG_TMPFILE" "$SOPS_CONFIG_FILE"
  then
    echo "âœ… sops config was written to $SOPS_CONFIG_FILE"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  main "$@"
fi
